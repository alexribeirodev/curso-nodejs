<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Início on Curso Node.js</title>
    <link>https://alexribeirodev.github.io/curso-nodejs/</link>
    <description>Recent content in Início on Curso Node.js</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://alexribeirodev.github.io/curso-nodejs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Console</title>
      <link>https://alexribeirodev.github.io/curso-nodejs/docs/overview-javascript/console/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alexribeirodev.github.io/curso-nodejs/docs/overview-javascript/console/</guid>
      <description>Console Um dos processos mais utilizados nas linguagens de programação para se debugar um algoritmo é através impressões (mais conhecidos como &amp;ldquo;print&amp;rdquo;), geralmente a nível console/terminal, do que desejamos ver do fluxo de execução, podendo ser desde fluxos de entrada, saída e erros.
Essa impressão difere entre as linguagens em questão de sintaxe, mas sua mecânica não costuma ser diferente. Abaixo temos listadas alguns exemplos desse tipo de impressão em algumas linguagens.</description>
    </item>
    
    <item>
      <title>Exemplos</title>
      <link>https://alexribeirodev.github.io/curso-nodejs/docs/node/exemplos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alexribeirodev.github.io/curso-nodejs/docs/node/exemplos/</guid>
      <description>Exemplos Todos os código exemplos que serão feitos no treinamento podem ser baixados clicando [aqui]().</description>
    </item>
    
    <item>
      <title>O que é Node.js?</title>
      <link>https://alexribeirodev.github.io/curso-nodejs/docs/introducao/o-que-e-node/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alexribeirodev.github.io/curso-nodejs/docs/introducao/o-que-e-node/</guid>
      <description>O que é Node.js? Node.js é um runtime de JavaScript, criado por Ryan Dahl em 2009. Foi desenvolvido em cima do motor JavaScript V8 — engine criada pelo Google e utilizado no Chrome e Chromium, desenvolvida na linguagem C++ — , que leva o processamento e renderização do JavaScript para o lado do servidor.
Node.js usa um modelo de I/O não bloqueante orientada a evento que o torna leve e eficiente, que possibilita criar aplicações rápidas, escaláveis e estáveis.</description>
    </item>
    
    <item>
      <title>Instalação do Node.js</title>
      <link>https://alexribeirodev.github.io/curso-nodejs/docs/introducao/instalacao-node/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alexribeirodev.github.io/curso-nodejs/docs/introducao/instalacao-node/</guid>
      <description>Instalação do Node.js Existem diversas formas de se instalar o Node.js e funciona em praticamente todas os sistemas operacionais e plataformas existentes atualmente. Daremos preferência à versão LTS (Long-term Support), pois a última versão (latest) pode possuir eventuais bugs (e de bugs, já basta os nossos rsrs).
Para instalar, vamos acessar a página de download oficial do Node.js, clicando aqui.
Windows  Existe as seguintes formas de se ter o Node.</description>
    </item>
    
    <item>
      <title>Links Úteis</title>
      <link>https://alexribeirodev.github.io/curso-nodejs/docs/node/links-uteis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alexribeirodev.github.io/curso-nodejs/docs/node/links-uteis/</guid>
      <description> Links Úteis  https://nodejs.org/ https://nodejs.org/docs/latest-v10.x/api/ https://www.npmjs.com/ https://expressjs.com/ https://mongoosejs.com/  </description>
    </item>
    
    <item>
      <title>Comentários</title>
      <link>https://alexribeirodev.github.io/curso-nodejs/docs/overview-javascript/comentarios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alexribeirodev.github.io/curso-nodejs/docs/overview-javascript/comentarios/</guid>
      <description>Comentários Comentários são essenciais em qualquer linguagem, principalmente se estiver pensando no seu coleguinha que irá tocar no código depois de você. Deixar comentários no código detalhando pelo menos para quê um item (classe, variável, função, e etc) está sendo utilizado é imprescindível para a saúde de qualquer projeto, independente do quão custoso isso possa ser.
No Javascript, existem duas formas de inserir comentários no código: linha única e multiplas linhas.</description>
    </item>
    
    <item>
      <title>Variáveis</title>
      <link>https://alexribeirodev.github.io/curso-nodejs/docs/overview-javascript/variaveis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alexribeirodev.github.io/curso-nodejs/docs/overview-javascript/variaveis/</guid>
      <description>Variáveis Em Javascript, as variáveis possuem tipagens dinâmicas. Podemos criar uma variável atribuindo um valor do tipo inteiro e logo em seguida atribuir uma string, como o exemplo a seguir.
var x = 1 console.log(x) // 1 x = &amp;quot;Essa é uma string&amp;quot; console.log(x) // &amp;quot;Essa é uma string&amp;quot;  Os nomes das variáveis em Javascript são bastante flexíveis. Eles podem conter letras, números, sublinhados e cifrões. A regra aqui é que uma variável só pode começar com um caractere, um cifrão ou um sublinhado, mas nunca com um número.</description>
    </item>
    
    <item>
      <title>Objetos</title>
      <link>https://alexribeirodev.github.io/curso-nodejs/docs/overview-javascript/objetos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alexribeirodev.github.io/curso-nodejs/docs/overview-javascript/objetos/</guid>
      <description>Objetos Utilizando Javascript, existem varias formas de se construir um objeto. Utilizando JavaScript, existem varias formas de se construir um objeto. As três formas mais conhecidas são: utilizando a notação literal, utilizando funções construtoras e classes (esta será abordada em outro tópico).
Um objeto é composto por um conjunto de chaves e valores, estes podendo ser desde string à functions, entre duas chaves ({}). Suponha o seguinte exemplo de função construtora:</description>
    </item>
    
    <item>
      <title>Funções</title>
      <link>https://alexribeirodev.github.io/curso-nodejs/docs/overview-javascript/funcoes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alexribeirodev.github.io/curso-nodejs/docs/overview-javascript/funcoes/</guid>
      <description>Funções Segundo a descrição da mozilla.org:
 Funções são blocos de construção fundamentais em JavaScript. Uma função é um procedimento de JavaScript — um conjunto de instruções que executa uma tarefa ou calcula um valor. Para usar uma função, você deve defini-la em algum lugar no escopo do qual você quiser chamá-la.
 Funções em Javascript são conhecidas como objetos de primeira classe (first-class objects). Isso porque tudo o que você pode fazer com um objeto, você pode fazer com funções.</description>
    </item>
    
    <item>
      <title>Contexto (this)</title>
      <link>https://alexribeirodev.github.io/curso-nodejs/docs/overview-javascript/contexto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alexribeirodev.github.io/curso-nodejs/docs/overview-javascript/contexto/</guid>
      <description>Contexto (this) O contexto no Javacript é algo que tanto pode ser tanto nosso amigo quanto nosso pior inimigo. O mesmo é responsável muitas vezes o motivo de bugs em nosso algoritmo, como também a solução para muitos de nossos problemas.
O contexto pode ser acessado de qualquer parte do seu código pelo objeto reservado this. Porém, seu valor pode ser diferente dependendo de qual parte do seu código está sendo chamado.</description>
    </item>
    
    <item>
      <title>Operadores Aritméticos</title>
      <link>https://alexribeirodev.github.io/curso-nodejs/docs/overview-javascript/operadores-aritmeticos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alexribeirodev.github.io/curso-nodejs/docs/overview-javascript/operadores-aritmeticos/</guid>
      <description>Operadores Aritméticos Operadores aritméticos tem valores numéricos (literais ou variáveis) como seus operadores e retornam um valor numérico único. Os operadores aritméticos padrões são adição (+), subtração (-), multiplicação (*), e divisão (/). (mozilla.org)
Adição (+) Este operador produz a soma dos valores, estes sendo numéricos ou strings.
Exemplos:
// Número + Número -&amp;gt; adição 1 + 2 // 3 // Booleano + Número -&amp;gt; adição true + 1 // 2 // Booleano + Booleano -&amp;gt; adição false + false // 0 // Número + String -&amp;gt; concatenação 5 + &amp;quot;foo&amp;quot; // &amp;quot;5foo&amp;quot; // String + Booleano -&amp;gt; concatenação &amp;quot;foo&amp;quot; + false // &amp;quot;foofalse&amp;quot; // String + String -&amp;gt; concatenação &amp;quot;foo&amp;quot; + &amp;quot;bar&amp;quot; // &amp;quot;foobar&amp;quot;  Subtração (-) Este operador subtrai dois valores, produzindo sua diferença.</description>
    </item>
    
    <item>
      <title>Array</title>
      <link>https://alexribeirodev.github.io/curso-nodejs/docs/overview-javascript/listas-arrays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alexribeirodev.github.io/curso-nodejs/docs/overview-javascript/listas-arrays/</guid>
      <description>Array O objeto Array do JavaScript é um objeto global usado na construção de &amp;lsquo;arrays&amp;rsquo;: objetos de alto nível semelhantes a listas.
Criando um Array const frutas = [&#39;Maçã&#39;, &#39;Banana&#39;]; console.log(frutas.length); // 2  Acessar um item (index) do Array const primeiro = frutas[0]; // Maçã const ultimo = frutas[frutas.length - 1]; // Banana  Métodos Modificadores Um objeto do tipo Array possui métodos que podem ser utilizados para modificar sua estrutura.</description>
    </item>
    
    <item>
      <title>Condicionais</title>
      <link>https://alexribeirodev.github.io/curso-nodejs/docs/overview-javascript/condicionais/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alexribeirodev.github.io/curso-nodejs/docs/overview-javascript/condicionais/</guid>
      <description>Condicionais As estruturas condicionais Javascript não difere muito da existente na maioria das outras linguagens de programação, as utilizamos para definir se algo deve acontecer ou não.
if&amp;hellip;else A condicional if é uma estrutura condicional que executa a afirmação, dentro do bloco, se determinada condição for verdadeira. Se for falsa, executa as afirmações dentro de else.
let x = 5 if (x &amp;gt; 5 &amp;amp;&amp;amp; x &amp;lt; 50) { console.</description>
    </item>
    
    <item>
      <title>Loops</title>
      <link>https://alexribeirodev.github.io/curso-nodejs/docs/overview-javascript/loops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alexribeirodev.github.io/curso-nodejs/docs/overview-javascript/loops/</guid>
      <description>Loops Assim como as estruturas condicionais Javascript, as estruturas de repetição também não se diferem tanto das existente em outras linguagens de programação. Essas estruturas de repetição, são utilizadas para repetir ações semelhantes que são executadas para todos os elementos de uma lista de dados, ou simplesmente para repetir um mesmo processamento até que a condição seja satisfeita.
for A instrução for cria um loop que consiste em três expressões opcionais, dentro de parênteses e separadas por ponto e vírgula, seguidas por uma declaração ou uma sequência de declarações executadas em sequência.</description>
    </item>
    
    <item>
      <title>Classes</title>
      <link>https://alexribeirodev.github.io/curso-nodejs/docs/overview-javascript/classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alexribeirodev.github.io/curso-nodejs/docs/overview-javascript/classes/</guid>
      <description>Classes Uma classe Javascript é um tipo especial de função.
Declarando classes Uma maneira de definir uma classe é usando uma declaração de classe. Para declarar uma classe, você deve usar a palavra-chave class seguida pelo nome da classe.
class Retangulo { constructor(altura, largura) { this.altura = altura; this.largura = largura; } }  Outra forma de declarar uma classe é por meio do que chamados de Expressão de Classe.</description>
    </item>
    
    <item>
      <title>Programação Assíncrona</title>
      <link>https://alexribeirodev.github.io/curso-nodejs/docs/overview-javascript/programacao-assincrona/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://alexribeirodev.github.io/curso-nodejs/docs/overview-javascript/programacao-assincrona/</guid>
      <description>Programação Assíncrona Síncrono ou assíncrono diz respeito ao fluxo de execução de um programa. Quando uma operação executa completamente antes de passar o controle à seguinte, a execução é síncrona.
Pode-se fazer a analogia de uma operação assíncrona ao agendamento de uma operação. A thread agenda a operação e pode continuar a execução normalmente. Quando a operação assíncrona estiver concluída a thread tem oportunidade de processar o seu resultado. Essa oportunidade normalmente é criada usando callbacks.</description>
    </item>
    
  </channel>
</rss>