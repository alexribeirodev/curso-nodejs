(function(){const pages=[{"idx":0,"href":"/curso-nodejs/docs/overview-javascript/console/","title":"Console","content":" Console Um dos processos mais utilizados nas linguagens de programação para se debugar um algoritmo é através impressões (mais conhecidos como \u0026ldquo;print\u0026rdquo;), geralmente a nível console/terminal, do que desejamos ver do fluxo de execução, podendo ser desde fluxos de entrada, saída e erros.\nEssa impressão difere entre as linguagens em questão de sintaxe, mas sua mecânica não costuma ser diferente. Abaixo temos listadas alguns exemplos desse tipo de impressão em algumas linguagens.\nJava:\nSystem.out.println(\u0026quot;Hello World!\u0026quot;);  C#:\nConsole.Write(\u0026quot;Hello World!\u0026quot;);  Python:\nprint(\u0026quot;Hello World!\u0026quot;)  No Javascript, essa responsabilidade fica sobre o objeto console, que fornece acesso ao console de debug do navegador incluindo um conjunto de ferramentas.\nHello World! Agora já podemos executar nosso primeiro e clássico Hello World utilizando este objeto do Javascript. Para isso, acesse qualquer página web em um navegador de sua preferência, clique com o botão direito sobre qualquer lugar da página e procure a opção Inspecionar. Notará que abriu uma nova camada no navegador, nela acesse a aba Console. Este será nosso primeiro playground para Javascript.\nCopie o código abaixo, cole no console e tecle Enter:\nconsole.log(\u0026quot;Hello World!\u0026quot;)  Parabéns! Você executou seu primeiro trecho de código em Javascript.\nSaiba mais O objeto console possui diversas outras ferramentas complementares ao ´console.log´, clique aqui para saber mais.\n"},{"idx":1,"href":"/curso-nodejs/docs/node/gerenciando-dependencias/","title":"Gerenciando pacotes e dependências com NPM","content":" Gerenciando pacotes e dependências com NPM Package.json "},{"idx":2,"href":"/curso-nodejs/docs/introducao/","title":"Introdução","content":""},{"idx":3,"href":"/curso-nodejs/docs/introducao/o-que-e-node/","title":"O que é Node.js?","content":" O que é Node.js? Node.js é um runtime de JavaScript, criado por Ryan Dahl em 2009. Foi desenvolvido em cima do motor JavaScript V8 — engine criada pelo Google e utilizado no Chrome e Chromium, desenvolvida na linguagem C++ — , que leva o processamento e renderização do JavaScript para o lado do servidor.\nNode.js usa um modelo de I/O não bloqueante orientada a evento que o torna leve e eficiente, que possibilita criar aplicações rápidas, escaláveis e estáveis. Desde seu surgimento, vem ganhando crescente espaço entre profissionais de tecnologia do Brasil e do mundo.\nJá pensou, poder utilizar javascript no back-end, com a mesma segurança proporcionada por linguagens como PHP e ASP.NET?!\nPara quem já tem certa experiência com desenvolvimento web (certamente conhece a limitação de uso do Javascript no front-end) nunca iria imaginar essa possibilidade.\nAgora estamos em uma era diferente, onde praticamente todas as grandes limitações do Javascript não existem mais. A cada dia infinitas possibilidades surgem e diversas referências vem aderindo a esse avanço.\nPor que (e quando) utilizar Node.js? Vou listar pontos cruciais, alguns já mencionados anteriormente, que irão te esclarecer o porquê de utilizar o Node.js:\n Assíncrono ; I/O sem bloqueios ; Alta performance ; Escalabilidade fácil e barata ; Loop de eventos.  Um detalhe que toma a dianteira em relação aos concorrentes é o loop de eventos. Irei explicar melhor como isso funciona.\nGeralmente, um jeito “tradicional” de lidar com muitas requisições é criando múltiplas threads, ou seja, para cada requisição é criada uma thread. Nela é tratada a requisição e somente após o retorno deste tratamento a thread é finalizada. Porém, muito recurso é gasto nesse processo e muitas vezes de forma desnecessária, já que nem sempre todo aquele recurso reservado é utilizado e a thread fica “estacionada” enquanto o tratamento não estiver concluído.\n Quando uso o termo “tratamento” me refiro a qualquer processo feito antes de devolver uma resposta, seja uma consulta no banco, verificação de arquivo, cálculo…\n Já o Node.js, trata toda e qualquer requisição em uma única thread.\n Aí você me pergunta: Então como é possível ele ser tão performático?\n Quando ele recebe uma requisição, ao invés de esperar o resultado do tratamento desta, ele segue com a próxima requisição e assim por diante, como uma fila. Quando alguma requisição em espera tiver seu tratamento finalizado, é sinalizado um evento que a retornará o quanto antes. Ou seja, Node.js utiliza o que é chamado modelo de programação orientado a evento.\nIsso quer dizer que, com o Node.js, temos um ganho muito grande de número de requisições que podem ser processadas.\nNode.js não é apenas um servidor, já que hoje em dia pode ser utilizado para criar até mesmo aplicações desktop. Também é ótimo para realizar diversos tipos de projetos, como:\n APIs (principal uso); Aplicações web real-time como servidores de chat ou aplicações colaborativas entre múltiplos usuários (socket); Jogos multiplayer; Aplicações que demandam alta escalabilidade; Servidores de streaming de dados.  Quando não utilizar? Por usar somente uma thread, ele não serve para lidar com algoritmos complexos que consumam muita CPU, como edição de imagens, por exemplo. Isso impediria a execução de outras ações até o processamento estar completo.\nQuem já utiliza?  Então quer dizer que não é só uma “modinha”?\n Aqui vai uma lista de empresas conhecidas que utilização esta linda tecnologia:\n Walmart; PayPal; Groupon; Netflix; LinkedIn ; New York Times; Flickr ; Mozilla ; Yahoo..  Links Úteis  https://nodejs.org/ https://en.wikipedia.org/wiki/Ryan_Dahl https://v8.dev/ https://medium.com/reactbrasil/como-o-javascript-funciona-dentro-da-engine-v8-5-dicas-sobre-como-escrever-c%C3%B3digo-otimizado-e05af6088fd5 https://dev.to/alexribeir0_/o-que-e-node-js-4oh5 https://github.com/Webschool-io/be-mean/blob/master/Apostila/module-nodejs/pt-br/theory.md  "},{"idx":4,"href":"/curso-nodejs/docs/introducao/instalacao-node/","title":"Instalação do Node.js","content":" Instalação do Node.js Existem diversas formas de se instalar o Node.js e funciona em praticamente todas os sistemas operacionais e plataformas existentes atualmente. Daremos preferência à versão LTS (Long-term Support), pois a última versão (latest) pode possuir eventuais bugs (e de bugs, já basta os nossos rsrs).\nPara instalar, vamos acessar a página de download oficial do Node.js, clicando aqui.\nWindows  Existe as seguintes formas de se ter o Node.js instalado no Windows:\n .msi .zip Chocolatey Scoop  Todas estas formas podem ser encontrada na página oficial de download.\n Linux  Existem algumas formas de se instalar o Node.js no linux, mas a forma mais rápida é através do terminal. Por padrão, os sistemas operacionais baseados no Ubuntu já possuem alguma versão do Node.js instalada por padrão, só que vamos focar no processo manual de instalar a versão LTS.\nPara ver todas as opções de instalação no Linux por terminal basta clicar aqui.\nAbaixo temos um exemplo de instalação no Ubuntu:\n$ curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - $ sudo apt-get install -y nodejs npm   MacOS  Para instalar no MacOs pode ser por meio de: - .pkg - .tar.gz - Homebrew - MacPorts - pkgsrc\nComo o Homebrew é um dos gerenciadores de pacotes mais utilizados para MacOS, abaixo temos um exemplo de como é feita a instalação por terminal:\n$ brew install node    Após instalação concluída, vamos validar pelo terminal a versão atual do Node.js e do NPM (Node Package Manager):\n$ node --version $ npm --version  Links Úteis  https://nodejs.org/en/download/  "},{"idx":5,"href":"/curso-nodejs/docs/node/manipulando-arquivos/","title":"Manipulando Arquivos","content":" Manipulando Arquivos "},{"idx":6,"href":"/curso-nodejs/docs/overview-javascript/","title":"Overview Javascript","content":""},{"idx":7,"href":"/curso-nodejs/docs/overview-javascript/comentarios/","title":"Comentários","content":" Comentários Comentários são essenciais em qualquer linguagem, principalmente se estiver pensando no seu coleguinha que irá tocar no código depois de você. Deixar comentários no código detalhando pelo menos para quê um item (classe, variável, função, e etc) está sendo utilizado é imprescindível para a saúde de qualquer projeto, independente do quão custoso isso possa ser.\nNo Javascript, existem duas formas de inserir comentários no código: linha única e multiplas linhas.\nExemplos com linha única utilizando //:\n// Variáveis var x = 0; // Declarando variável x var y = x + 1; // Declarando variável y  Exemplo com multiplas linhas, abrindo o bloco com /* e fechando com */:\n/* Essa classe é responsável por definir o objeto User com seus atributos e métodos */ class User { constructor(nome, sobrenome, idade) { this.nome = nome this.sobrenome = sobrenome this.idade = idade } }  Links Úteis - https://www.w3schools.com/js/js_comments.asp\n"},{"idx":8,"href":"/curso-nodejs/docs/node/json/","title":"JSON","content":" JSON "},{"idx":9,"href":"/curso-nodejs/docs/node/","title":"Node.js","content":""},{"idx":10,"href":"/curso-nodejs/docs/node/requisicoes-http/","title":"Requisições HTTP com módulo HTTP","content":" Requisições HTTP com módulo HTTP "},{"idx":11,"href":"/curso-nodejs/docs/overview-javascript/variaveis/","title":"Variáveis","content":" Variáveis Em Javascript, as variáveis possuem tipagens dinâmicas. Podemos criar uma variável atribuindo um valor do tipo inteiro e logo em seguida atribuir uma string, como o exemplo a seguir.\nvar x = 1 console.log(x) // 1 x = \u0026quot;Essa é uma string\u0026quot; console.log(x) // \u0026quot;Essa é uma string\u0026quot;  Os nomes das variáveis em Javascript são bastante flexíveis. Eles podem conter letras, números, sublinhados e cifrões. A regra aqui é que uma variável só pode começar com um caractere, um cifrão ou um sublinhado, mas nunca com um número. No entanto, é só no primeiro caractere, depois dele você pode utilizar o que quiser.\n Javascript é case-sensitive com seus identificadores.\n Operador de atribuição Em javascript, o sinal de igual (=) é um operador de atribuição, não um operador de igualdade, assim como em diversas outras linguagens.\n O operador de igualdade é escrito como == (ou ===, se for comparar tanto o valor quanto seu tipo).\n Tipos de dados Em Javascript, todas as estrutura são objetos. Ainda assim, existem os tipos de dados abaixo:\n Strings — Uma String nada mais é que texto puro. Numbers — São os números, seja eles integer, float, double etc. Booleans — São os operadores booleanos (true ou false) Arrays — É uma estrutura de dado para armazenar uma coleção de valores, sendo eles de qualquer tipo. Objects — Conjunto de atributos aninhados a uma variável denomina-se um objeto. Functions — Em JavaScript é possível declarar uma variável como uma função, podendo fazer operações e retornando o valor para a variável de declaração. Obs: muito utilizado no paradigma de programação funcional.  Tipos de declarações Podemos fazer a declaração de uma variável no Javascript com três operadores: var, let e const. Ambos servem para o mesmo fim, armazenar valores de dados, porém possuem usabilidades distintas. O que diferencia uma da outra gira em torno ou de escopo ou de mutabilidade dos dados.\nConst Utilize quando você precisar declarar constantes, ou seja, você não quer haja uma nova atribuição de valor para uma variável durante a execução do bloco. O escopo das variáveis declaradas com const será o bloco em que elas foram declaradas. Além de que esta, ao contrário das outras, deve ter sempre um valor atribuído logo quando inicializada.\nVar Utilize quando precisar declarar uma variável que deve ser global dentro do seu contexto de execução, ou seja, o valor dessa variável poderá ser alterado a qualquer momento em qualquer bloco que esteja dentro do mesmo contexto de execução. Dito isto, o escopo dos identificadores definidos com var é o contexto de execução em que foram declarados, se a variável foi declarada dentro de uma função, seu escopo será aquela função, se não foi declarado dentro de nenhuma função, seu escopo será global.\nLet Utilize quando você precisar fazer reatribuições, ou seja, a sua variável precisará assumir diferentes valores durante a execução do bloco. Assim como const, o escopo das variáveis definidas com let será o bloco em que foram declaradas.\n"},{"idx":12,"href":"/curso-nodejs/docs/overview-javascript/objetos/","title":"Objetos","content":" Objetos "},{"idx":13,"href":"/curso-nodejs/docs/node/requisicoes-request/","title":"Requisições HTTP com módulo Request","content":" Requisições HTTP com módulo Request "},{"idx":14,"href":"/curso-nodejs/docs/node/servidor-http/","title":"Criando um servidor HTTP com módulo HTTP","content":" Criando um servidor HTTP com módulo HTTP "},{"idx":15,"href":"/curso-nodejs/docs/overview-javascript/funcoes/","title":"Funções","content":" Funções "},{"idx":16,"href":"/curso-nodejs/docs/node/expressjs/","title":"Conhecendo o Express.js","content":" Conhecendo o Express.js Criando uma API com Express.js Estruturando no padrão MVC Criando gerenciamento de rotas Conhecendo Middlewares "},{"idx":17,"href":"/curso-nodejs/docs/node/servicos-aws/","title":"Consumindo Serviços da AWS","content":" Consumindo Serviços da AWS "},{"idx":18,"href":"/curso-nodejs/docs/overview-javascript/contexto/","title":"Contexto (this)","content":" Contexto (this) "},{"idx":19,"href":"/curso-nodejs/docs/overview-javascript/listas-arrays/","title":"Listas/Arrays","content":" Listas/Arrys ForEach Map Filter Push Pop Shift Shift UnShift Indexof Splice Slice "},{"idx":20,"href":"/curso-nodejs/docs/overview-javascript/operadores-aritmeticos/","title":"Operadores Aritméticos","content":" Operadores Aritméticos Soma (+) Subtração (-) Multiplicação (*) Divisão (/) Módulo (%) Exponenciação (**) Incremento (++) Decremento (\u0026ndash;) Negação Unária (-) Soma Unária (+) "},{"idx":21,"href":"/curso-nodejs/docs/overview-javascript/condicionais/","title":"Condicionais","content":" Condicionais If Else If Else Ternário Switch "},{"idx":22,"href":"/curso-nodejs/docs/overview-javascript/loops/","title":"Loops","content":" Loops For ForIn ForOf While Break e Continue "},{"idx":23,"href":"/curso-nodejs/docs/overview-javascript/prototype/","title":"Prototype","content":" Prototype "},{"idx":24,"href":"/curso-nodejs/docs/overview-javascript/classes/","title":"Classes","content":" Classes "},{"idx":25,"href":"/curso-nodejs/categories/","title":"Categories","content":""},{"idx":26,"href":"/curso-nodejs/docs/","title":"Docs","content":""},{"idx":27,"href":"/curso-nodejs/","title":"Início","content":" Bem vindo ao curso de Node.js! Aqui encontrará todo o conteúdo que precisa para que possa começar a atuar com essa linda tecnologia, Node.js.\n"},{"idx":28,"href":"/curso-nodejs/tags/","title":"Tags","content":""}];window.bookSearch={pages:pages,idx:lunr(function(){this.ref("idx");this.field("title");this.field("content");pages.forEach(this.add,this);}),}})();